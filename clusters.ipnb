from sklearn.metrics import mean_absolute_error, median_absolute_error
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
countries=pd.read_csv("countries of the world (2).csv")
countries.head()
columns_c=['Population', 'Area (sq. mi.)', 'Pop. Density (per sq. mi.)', 'Coastline (coast/area ratio)', 'Net migration', 'Infant mortality (per 1000 births)', 'GDP ($ per capita)', 'Literacy (%)', 'Phones (per 1000)', 'Arable (%)', 'Crops (%)', 'Other (%)', 'Climate', 'Birthrate', 'Deathrate', 'Agriculture', 'Industry', 'Service']
countries[columns_c] = countries[columns_c].replace(',', '.', regex=True)
countries[columns_c] = countries[columns_c].astype(float)
countries[columns_c] = countries[columns_c].fillna(countries[columns_c].mean())
from sklearn.preprocessing import StandardScaler

# Tworzenie instancji obiektu StandardScaler
scaler = StandardScaler()

# Normalizacja danych
countries[columns_c] = scaler.fit_transform(countries[columns_c])
countries.head()
from sklearn.cluster import KMeans

# Tworzenie instancji obiektu KMeans z 3 klastrami
kmeans = KMeans(n_clusters=3)

# Dopasowanie modelu do znormalizowanych danych
kmeans.fit(countries[columns_c])

# Przewidywanie klastrów dla danych
countries['Cluster'] = kmeans.predict(countries[columns_c])
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Lista kosztów dla różnych wartości k
costs = []

# Przetestuj różne wartości k od 1 do 10
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(countries[columns_c])
    costs.append(kmeans.inertia_)

# Wykres "łokcia" - kosztu w zależności od liczby klastrów
plt.plot(range(1, 11), costs, marker='o')
plt.xlabel('Liczba klastrów (k)')
plt.ylabel('Koszt')
plt.title('Metoda "łokcia"')
plt.show()
