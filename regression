{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNjEmQ+xUdZkEhwK7pAC4og",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UEPP40/PUM/blob/Yarosh/regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lsaEFIQoM1T1"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import mean_absolute_error, median_absolute_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.linear_model import LinearRegression\n",
        "salary=pd.read_csv(\"Salary Data (2).csv\")\n",
        "salary.head()\n",
        "le=LabelEncoder()\n",
        "salary[\"Gender_le\"]=le.fit_transform(salary[\"Gender\"])\n",
        "salary[\"Education level_le\"]=le.fit_transform(salary[\"Education Level\"])\n",
        "salary[\"Job Title_le\"]=le.fit_transform(salary[\"Job Title\"])\n",
        "salary.head()\n",
        "salary.drop(columns=[\"Gender\",\"Education Level\", \"Job Title\"], inplace=True)\n",
        "new_column_order = [\"Age\",\"Gender_le\",\t\"Education level_le\",\t\"Job Title_le\", \"Years of Experience\",\t\"Salary\"]\n",
        "salary = salary.reindex(columns=new_column_order)\n",
        "salary.head(85)\n",
        "missing_values_salary = salary.isnull().sum()\n",
        "print(\"empty cells in  salary:\", missing_values_salary)\n",
        "salary.fillna(salary.mean(), inplace=True)\n",
        "#podział na zbiór treningowy i testowy\n",
        "salary[\"Salary\"].value_counts()\n",
        "X = salary[[\"Age\",\"Gender_le\",\t\"Education level_le\",\t\"Job Title_le\", \"Years of Experience\"]]\n",
        "y = salary[\"Salary\"]\n",
        "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\n",
        "print(\"Training set - Salary distribution:\\n\", y_train.value_counts())\n",
        "print(\"Testing set - Salary distribution:\\n\", y_test.value_counts())\n",
        "X_train.value_counts()\n",
        "\n",
        "regression = LinearRegression().fit(X_train, y_train)\n",
        "r_squared_train = regression.score(X_train, y_train) #pobranie R^2\n",
        "print(\"R^2 train zasób:\", r_squared_train)\n",
        "coefficients = regression.coef_\n",
        "wyraz_wolny = regression.intercept_\n",
        "print(\"współczynnik nachylenia:\", coefficients)\n",
        "print(\"wyraz wolny:\", wyraz_wolny)\n",
        "y_2=regression.predict(X_test)\n",
        "mean_absolute_error(y_test,y_2)\n",
        "median_absolute_error(y_test,y_2)"
      ]
    }
  ]
}